x=0:600
q1v=eval.fd(x,qlist[[1]])
plot(q1v)
plot(q1v,'l')
plot(x,q1v,'l')
q2v=eval.fd(x,qlist[[2]])
plot(x,q1v,'l')
lines(x,q2v,col='red')
re=sldp2(q1v,q2v)
r12=pth2r(re[[2]])
plot(r12)
d1=d1list[[1]]
d2=d1list[[2]]
newd2=warp(d2,r12)
class(d2)
class(r12)
warp(d2,r12)
str(r12)
fd=d2
rfd=r12
n=length(fd$fdnames$time)
basisf=fd$basis
frange=fd$basis$rangeval
xf=seq(frange[1],frange[2],len=n)
xfs=(xf-frange[1])/frange[2]
newx=eval.fd(xfs,rfd)*frange[2]+frange[1]
newx[1]=frange[1]
newx[n]=frange[2]
y=eval.fd(newx, fd)
newx
newx[1:500]
xf
frange
str(fd)
xfs
pnt
re[[1]]
re[[2]]
pth2r=function(path){
path=path[order(path[,1]),]
# path=path[-1,]
path=path-1
x=path[,1]/max(path[,1])
y=path[,2]/max(path[,2])
#interpolate
rbasis=create.bspline.basis(c(0,1),norder = 2, breaks = x)
rfd=Data2fd(x, y, rbasis)
}
r12=pth2r(re[[2]])
d1=d1list[[1]]
d2=d1list[[2]]
newd2=warp(d2,r12)
plot(d1)
plot(newd2, col='red', add=T)
plot(d2, col='blue', add=T)
plot(d1)
plot(d1, ylab='Speed of pen moving', titles = 'Pen moving speed curve')
plot(d1, ylab='Speed of pen moving', main = 'Pen moving speed curve')
plot(qlist[[1]])
plot(qlist[[1]], ylab='q', main='SRSF representation')
mean(qlist)
mean(qlist[[1]],qlist[[2]],qlist[[3]])
unlist(qlist)
class(unlist(qlist))
sumf = qlist[[1]]
for(i in 1:50){
sumf = sumf+qlist[[i]]
}
meanq = sumf/50
qlist[[1]]+qlist[[2]]
class(qlist[[1]]+qlist[[2]])
sumf = qlist[[1]]
for(i in 2:50){
sumf = sumf + qlist[[i]]
}
meanq = sumf/50
sumf = qlist[[1]]
sumf = sumf + qlist[2[]]
sumf = sumf + qlist[[2]]
sumf = qlist[[1]]
for(i in 2:50){
print(i)
sumf = sumf + qlist[[i]]
}
class(qlist[[1]])
class(qlist[[11]])
class(qlist[[12]])
class(qlist[[13]])
class(qlist[[14]])
class(qlist[[150]])
class(qlist[[50]])
d1list[[11]]
d1list[[10]]
for(i in 11:50){
d1list[[i]]=wspeed(0:600, ssc[,i,1], ssc[,i,2], 80)
# if(i==1){
#   plot(d1list[[i]], col=mycol[i], ylab='adjusted pen speed')
#   next
# }
# plot(d1list[[i]],add=T, col=mycol[i])
}
sumf = qlist[[1]]
for(i in 2:50){
print(i)
sumf = sumf + qlist[[i]]
}
meanq = sumf/50
saveRDS(d1list,'d1list.rds')
qlist=vector('list', 50)
for(i in 1:10){
qlist[[i]] = f2q(d1list[[i]], 0:600)
}
saveRDS(qlist,'qlist.rds')
plot(qlist[[1]], ylab='q', main='SRSF representation')
plot(qlist[[2]], ylab='q', main='SRSF representation')
for(i in 2:50){
print(i)
sumf = sumf + qlist[[i]]
}
qlist=vector('list', 50)
for(i in 1:50){
qlist[[i]] = f2q(d1list[[i]], 0:600)
}
saveRDS(qlist,'qlist.rds')
sumf = qlist[[1]]
for(i in 2:50){
print(i)
sumf = sumf + qlist[[i]]
}
meanq = sumf/50
meanq = sumf*0.02
plot(meanq)
mycol=colorRampPalette(c('black','blue','green','yellow','red'))(50)
plot(sumf, col=mycol[1])
sumf = qlist[[1]]
plot(sumf, col=mycol[1])
for(i in 2:50){
plot(qlist[[i]],col=mycol[i], add=T)
sumf = sumf + qlist[[i]]
}
plot(sumf)
sumf = qlist[[1]]
plot(sumf, col=mycol[1])
for(i in 2:50){
plot(qlist[[i]],col=mycol[i], add=T)
sumf = sumf + qlist[[i]]
}
meanq = sumf*0.02
plot(meanq, lty=2, lwd=3, add=T)
x=0:1000
q1v=eval.fd(x,qlist[[1]])
x=seq(0.600, len=1001)
q1v=eval.fd(x,qlist[[1]])
x
x=seq(0, 600, len=1001)
q1v=eval.fd(x,qlist[[1]])
q2v=eval.fd(x,qlist[[2]])
plot(x,q1v,'l')
lines(x,q2v,col='red')
re=sldp2(q1v,q2v)
r12=pth2r(re[[2]])
d1=d1list[[1]]
d2=d1list[[2]]
newd2=warp(d2,r12)
plot(d1)
plot(newd2, col='red', add=T)
plot(d2, col='blue', add=T)
plot(d1)
plot(newd2, col='red', add=T)
plot(d2, col='blue', add=T)
?legend
legend(x=0, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'))
legend(x=0, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col('black', 'red', 'blue'))
legend(x=0, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col('black', 'red', 'blue'))
plot(d1)
plot(newd2, col='red', add=T)
plot(d2, col='blue', add=T)
legend(x=0, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col('black', 'red', 'blue'))
legend(x=0, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col=c('black', 'red', 'blue'))
legend(x=0, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col=c('black', 'red', 'blue'), lty=1)
legend(x=250, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col=c('black', 'red', 'blue'), lty=1)
plot(d1)
plot(newd2, col='red', add=T)
plot(d2, col='blue', add=T)
legend(x=250, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col=c('black', 'red', 'blue'), lty=1)
plot(d1, ylab='Pen moving speed', main='Register 2nd observation to 1st observation')
plot(newd2, col='red', add=T)
plot(d2, col='blue', add=T)
legend(x=250, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col=c('black', 'red', 'blue'), lty=1)
tsbas=create.bspline.basis(c(0,1), norder = 1, nbasis=6)
plot(tsbas)
tsbas=create.bspline.basis(c(0,1), norder = 2, nbasis=6)
plot(tsbas)
tsbas=create.bspline.basis(c(0,10), norder = 2, nbasis=6)
plot(tsbas)
tsfd=smooth.basis(1:10,1:10,tsbas)
plot(tsfd)
eval.fd(1:10,tsfd)
eval.fd(1:10,tsfd$fd)
eval.fd(1:10,tsfd$fd,1)
dp = acos(sum(sqrt(eval.fd(seq(0,1,100),r12,1)))/100)
dp
plot(d1-newd2)
d1-newd2
d1+newd2
class(d1)
class(newd2)
str(newd2)
newd2=warp(d2,r12)$fd
plot(d1, ylab='Pen moving speed', main='Register 2nd observation to 1st observation')
plot(newd2, col='red', add=T)
plot(d2, col='blue', add=T)
legend(x=250, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col=c('black', 'red', 'blue'), lty=1)
#Calculate phase difference dp
dp = acos(sum(sqrt(eval.fd(seq(0,1,100),r12,1)))/100)
dp
plot(d1-newd2)
class(d1-newd2)
df = sqrt(sum((eval.fd(seq(0,600,len=1000),d1-newd2))^2)/n)
da = sqrt(sum((eval.fd(seq(0,600,len=1000),d1-newd2))^2)/n)
da
dp=0
da=0
dp[2]
dp[3]
dp[3000000]
x=seq(0, 600, len=1001)
q1v=eval.fd(x,qlist[[1]])
dp=0
da=0
d1=d1list[[1]]
plot(d1, col=mycol[1], ylab='Pen moving speed', main='Registered observations to 1st observation')
for(i in 2:50){
q2v=eval.fd(x,qlist[[i]])
# plot(x,q1v,'l')
# lines(x,q2v,col='red')
re=sldp2(q1v,q2v)
r12=pth2r(re[[2]])
d2=d1list[[i]]
newd2=warp(d2,r12)$fd
plot(newd2, col=mycol[i], add=T)
# plot(d2, col='blue', add=T)
# legend(x=250, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col=c('black', 'red', 'blue'), lty=1)
#Calculate phase difference dp
dp[i] = acos(sum(sqrt(eval.fd(seq(0,1,100),r12,1)))/100)
#Calculate amplitude difference da
da[i] = sqrt(sum((eval.fd(seq(0,600,len=1000),d1-newd2))^2)/n)
}
da
dp
da
dp
dp[1]=pi/2
dp
da
newd=vector('list',50)
newd[[1]]=d1
eval.fd(seq(0,1,100),r12,1)
seq(0,1,100)
eval.fd(seq(0,1,len=100),r12,1)
sqrt(eval.fd(seq(0,1,len=100),r12,1))
sum(sqrt(eval.fd(seq(0,1,len=100),r12,1)))
x=seq(0, 600, len=1001)
q1v=eval.fd(x,qlist[[1]])
dp=0
da=0
d1=d1list[[1]]
newd=vector('list',50)
newd[[1]]=d1
sumd=d1
plot(d1, col=mycol[1], ylab='Pen moving speed', main='Registered observations to 1st observation')
for(i in 2:50){
q2v=eval.fd(x,qlist[[i]])
# plot(x,q1v,'l')
# lines(x,q2v,col='red')
re=sldp2(q1v,q2v)
r12=pth2r(re[[2]])
d2=d1list[[i]]
newd2=warp(d2,r12)$fd
newd[[i]]=newd2
sumd = sumd + newd2
plot(newd2, col=mycol[i], add=T)
# plot(d2, col='blue', add=T)
# legend(x=250, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col=c('black', 'red', 'blue'), lty=1)
#Calculate phase difference dp
dp[i] = acos(sum(sqrt(eval.fd(seq(0,1,len=100),r12,1)))/100)
#Calculate amplitude difference da
da[i] = sqrt(sum((eval.fd(seq(0,600,len=1000),d1-newd2))^2)/n)
}
meand = sumd*0.02
plot(meand, lty=2, lwd=3, add=T)
da
dp
re=sldp2(qlist[[1]],qlist[[1]])
q1v
re=sldp2(q1v,q1v)
r=pth2r(re[[2]])
plot(r)
acos(sum(sqrt(eval.fd(seq(0,1,len=100),r,1)))/100)
eval.fd(seq(0,1,len=100),r,1)
sum(sqrt(eval.fd(seq(0,1,len=100),r,1)))/100
acos(0.99)
seq(0,1,len=100)[2:99]
acos(sum(sqrt(eval.fd(seq(0,1,len=100)[2:99],r,1)))/100)
acos(sum(sqrt(eval.fd(seq(0,1,len=100)[2:99],r,1)))/98)
x=seq(0, 600, len=1001)
q1v=eval.fd(x,qlist[[1]])
dp=0
da=0
d1=d1list[[1]]
newd=vector('list',50)
newd[[1]]=d1
sumd=d1
plot(d1, col=mycol[1], ylab='Pen moving speed', main='Registered observations to 1st observation')
for(i in 2:50){
q2v=eval.fd(x,qlist[[i]])
# plot(x,q1v,'l')
# lines(x,q2v,col='red')
re=sldp2(q1v,q2v)
r12=pth2r(re[[2]])
d2=d1list[[i]]
newd2=warp(d2,r12)$fd
newd[[i]]=newd2
sumd = sumd + newd2
plot(newd2, col=mycol[i], add=T)
# plot(d2, col='blue', add=T)
# legend(x=250, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col=c('black', 'red', 'blue'), lty=1)
#Calculate phase difference dp
dp[i] = acos(sum(sqrt(eval.fd(seq(0,1,len=100)[2:99],r12,1)))/98)
#Calculate amplitude difference da
da[i] = sqrt(sum((eval.fd(seq(0,600,len=1000)[2,999],d1-newd2))^2)/998)
}
meand = sumd*0.02
plot(meand, lty=2, lwd=3, add=T)
seq(0,600,len=1000)[2,999]
x=seq(0, 600, len=1001)
q1v=eval.fd(x,qlist[[1]])
dp=0
da=0
d1=d1list[[1]]
newd=vector('list',50)
newd[[1]]=d1
sumd=d1
plot(d1, col=mycol[1], ylab='Pen moving speed', main='Registered observations to 1st observation')
for(i in 2:50){
q2v=eval.fd(x,qlist[[i]])
# plot(x,q1v,'l')
# lines(x,q2v,col='red')
re=sldp2(q1v,q2v)
r12=pth2r(re[[2]])
d2=d1list[[i]]
newd2=warp(d2,r12)$fd
newd[[i]]=newd2
sumd = sumd + newd2
plot(newd2, col=mycol[i], add=T)
# plot(d2, col='blue', add=T)
# legend(x=250, y=1.425, c('f1(t)', 'f2(r(t))', 'f2(t)'), col=c('black', 'red', 'blue'), lty=1)
#Calculate phase difference dp
dp[i] = acos(sum(sqrt(eval.fd(seq(0,1,len=100)[2:99],r12,1)))/98)
#Calculate amplitude difference da
da[i] = sqrt(sum((eval.fd(seq(0,600,len=1000)[2:999],d1-newd2))^2)/998)
}
meand = sumd*0.02
plot(meand, lty=2, lwd=3, add=T)
da
dp
acos(sum(sqrt(eval.fd(seq(0,1,len=100)[2:99],r,1)))/98)
meand
plot(eval.fd(0:600, meand))
nth=1
t=300
df=data.frame(time=0:600, x=ssc[,nth,1], y=ssc[,nth,2], spd=eval.fd(0:600, meand)
)
df
library(gridExtra)
p=ggplot(data=df, aes(x,y,colour=time))+geom_line()
p
x
y
df$x
df&y
df$y
p=ggplot(data=df, aes(x,y,colour=time))+geom_point()
p
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()
p1
t=600
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+
p1
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()
p
p1
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.22, 0.22)) + scale_y_continuous(limits=c(-0.1, 0.1))
p1
t=300
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.22, 0.22)) + scale_y_continuous(limits=c(-0.1, 0.1))
p1
grid.arrange(p1, p2, ncol=2)
p2=ggplot(data=df[df$time<=t,], aes(x=time, y=spd, colour=time))+geom_line()
grid.arrange(p1, p2, ncol=2)
t=600
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.22, 0.22)) + scale_y_continuous(limits=c(-0.1, 0.1))
p2=ggplot(data=df[df$time<=t,], aes(x=time, y=spd, colour=time))+geom_line()+scale_x_continuous(limits=c(-0.22, 0.22)) + scale_y_continuous(limits=c(-0.1, 0.1))
grid.arrange(p1, p2, nrow=2)
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.22, 0.22)) + scale_y_continuous(limits=c(-0.1, 0.1))
p2=ggplot(data=df[df$time<=t,], aes(x=time, y=spd, colour=time))+geom_line()
grid.arrange(p1, p2, nrow=2)
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.22, 0.22)) + scale_y_continuous(limits=c(-0.1, 0.1))
p2=ggplot(data=df[df$time<=t,], aes(x=time, y=spd, colour=time))+geom_line()+scale_x_continuous(limits=c(0,600)) + scale_y_continuous(limits=c(1.405, 1.425))
grid.arrange(p1, p2, nrow=2)
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.2, 0.205)) + scale_y_continuous(limits=c(-0.1, 0.1))
p2=ggplot(data=df[df$time<=t,], aes(x=time, y=spd, colour=time))+geom_line()+scale_x_continuous(limits=c(0,600)) + scale_y_continuous(limits=c(1.405, 1.425))
grid.arrange(p1, p2, nrow=2)
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.18, 0.205)) + scale_y_continuous(limits=c(-0.1, 0.1))
p2=ggplot(data=df[df$time<=t,], aes(x=time, y=spd, colour=time))+geom_line()+scale_x_continuous(limits=c(0,600)) + scale_y_continuous(limits=c(1.405, 1.425))
grid.arrange(p1, p2, nrow=2)
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.18, 0.205)) + scale_y_continuous(limits=c(-0.1, 0.1))+scale_colour_gradientn(colors=c('black','blue','green','yellow','red'))
p2=ggplot(data=df[df$time<=t,], aes(x=time, y=spd, colour=time))+geom_line()+scale_x_continuous(limits=c(0,600)) + scale_y_continuous(limits=c(1.405, 1.425))+scale_colour_gradientn(colors=c('black','blue','green','yellow','red'))
grid.arrange(p1, p2, nrow=2)
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.18, 0.205)) + scale_y_continuous(limits=c(-0.1, 0.1))+scale_colour_gradientn(colors=c('black','blue','green','yellow','red'))
p2=ggplot(data=df[df$time<=t,], aes(x=time, y=spd, colour=time))+geom_line(size=2)+scale_x_continuous(limits=c(0,600)) + scale_y_continuous(limits=c(1.405, 1.425))+scale_colour_gradientn(colors=c('black','blue','green','yellow','red'))
grid.arrange(p1, p2, nrow=2)
install.packages("animation")
aniplot=function(t,nth){
df=data.frame(time=0:600, x=ssc[,nth,1], y=ssc[,nth,2], spd=eval.fd(0:600, meand))
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.18, 0.205)) + scale_y_continuous(limits=c(-0.1, 0.1))+scale_colour_gradientn(colors=c('black','blue','green','yellow','red'))
p2=ggplot(data=df[df$time<=t,], aes(x=time, y=spd, colour=time))+geom_line(size=2)+scale_x_continuous(limits=c(0,600)) + scale_y_continuous(limits=c(1.405, 1.425))+scale_colour_gradientn(colors=c('black','blue','green','yellow','red'))
grid.arrange(p1, p2, nrow=2)
}
aniplot(200)
aniplot(200, 1)
aniplot(300, 1)
aniplot(400, 1)
trace.animate <- function(nth) {
lapply(0:600, function(i) {
draw.curve(i,nth)
})
}
saveGIF(trace.animate(1), interval = .2, movie.name="trace.gif")
library(animation)
saveGIF(trace.animate(1), interval = .2, movie.name="trace.gif")
trace.animate <- function(nth) {
lapply(0:600, function(i) {
aniplot(i,nth)
})
}
saveGIF(trace.animate(1), interval = .2, movie.name="trace.gif")
trace.animate <- function(nth) {
lapply(seq(0,600,length.out = 5), function(i) {
aniplot(i,nth)
})
}
saveGIF(trace.animate(1), interval = .2, movie.name="trace.gif")
ani.options()
saveGIF(trace.animate(1), interval = .2, movie.name="trace.gif")
im.convert()
system("which convert", intern=TRUE)
Sys.getenv('PATH')
install.packages("devtools")
library(devtools)
dev_mode(on=T)
install.packages('animation', repos = 'http://yihui.name/xran')
install.packages("animation", repos = "http://yihui.name/xran")
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
library(animation)
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
dev_mode(on=F)
dev_mode
exists()
dev_mode(on=F)
dev_mode(on=T)
saveRDS(newd, 'newd.rds')
saveRDS(meand, 'meand.rds')
library(gridExtra)
library(animation)
library(fda)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
aniplot=function(t,nth){
df=data.frame(time=0:600, x=ssc[,nth,1], y=ssc[,nth,2], spd=eval.fd(0:600, meand))
p1=ggplot(data=df[df$time<=t,], aes(x,y,colour=time))+geom_point()+ scale_x_continuous(limits=c(-0.18, 0.205)) + scale_y_continuous(limits=c(-0.1, 0.1))+scale_colour_gradientn(colors=c('black','blue','green','yellow','red'))
p2=ggplot(data=df[df$time<=t,], aes(x=time, y=spd, colour=time))+geom_line(size=2)+scale_x_continuous(limits=c(0,600)) + scale_y_continuous(limits=c(1.405, 1.425))+scale_colour_gradientn(colors=c('black','blue','green','yellow','red'))
grid.arrange(p1, p2, nrow=2)
}
trace.animate <- function(nth) {
lapply(seq(0,600,length.out = 5), function(i) {
aniplot(i,nth)
})
}
aniplot(300,1)
saveGIF(trace.animate(1), interval = .2, movie.name="trace.gif")
trace.animate <- function(nth) {
lapply(seq(0,600,length.out = 200), function(i) {
aniplot(i,nth)
})
}
#save all iterations into one GIF
saveGIF(trace.animate(1), interval = .2, movie.name="trace.gif")
plot(0:600, ssc[,1,1],'l', ylab='x coordinate', xlab='time')
plot(xfd$fd, col='red', add=T)
aniplot(300,23)
